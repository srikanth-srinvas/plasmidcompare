{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/plasmidcompare/master/nextflow_schema.json",
    "title": "nf-core/plasmidcompare pipeline parameters",
    "description": "Pipeline for plasmid comparison and annotation",
    "type": "object",
    "$defs": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": [
                "input",
                "outdir"
            ],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "description": "Path to input file(s) (FASTQ or FASTA). Can be a single file, multiple files, or a TSV/CSV file listing input files.",
                    "help_text": "Specify the location of your input files. The input can be single-end or paired-end FASTQ files, or assembled genomes/contigs in FASTA format. You can also provide a TSV/CSV file listing the input files.",
                    "fa_icon": "fas fa-file"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. Use absolute paths for Cloud storage.",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                },
                "multiqc_title": {
                    "type": "string",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "fa_icon": "fas fa-file-signature"
                }
            }
        },
        "assembler_options": {
            "title": "Assembler options",
            "type": "object",
            "fa_icon": "fas fa-cogs",
            "description": "Options for the plasmid assembler.",
            "properties": {
                "kmer_sizes": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "minimum": 15,
                        "maximum": 127
                    },
                    "description": "K-mer sizes to use for assembly.",
                    "help_text": "Specify the k-mer sizes to use for the plasmid assembly. Valid values are between 15 and 127.",
                    "fa_icon": "fas fa-sliders-h"
                }
            }
        },
        "annotation_options": {
            "title": "Annotation options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Options for the annotation tools.",
            "properties": {
                "annotation_tool": {
                    "type": "string",
                    "description": "Annotation tool to use (Prokka or DFAST).",
                    "enum": [
                        "prokka",
                        "dfast"
                    ],
                    "default": "prokka",
                    "fa_icon": "fas fa-tools"
                },
                "annotation_database": {
                    "type": "string",
                    "description": "Database to use for annotation.",
                    "fa_icon": "fas fa-database"
                }
            }
        },
        "comparison_options": {
            "title": "Comparison options",
            "type": "object",
            "fa_icon": "fas fa-exchange-alt",
            "description": "Options for the comparison tools.",
            "properties": {
                "comparison_method": {
                    "type": "string",
                    "description": "Comparison method to use (BLASTn, BRIG, Mash).",
                    "enum": [
                        "blastn",
                        "brig",
                        "mash"
                    ],
                    "default": "blastn",
                    "fa_icon": "fas fa-exchange-alt"
                }
            }
        },
        "arg_detection_options": {
            "title": "ARG detection options",
            "type": "object",
            "fa_icon": "fas fa-shield-alt",
            "description": "Options for antibiotic resistance gene (ARG) detection.",
            "properties": {
                "arg_detection_tool": {
                    "type": "string",
                    "description": "ARG detection tool to use (ResFinder or CARD).",
                    "enum": [
                        "resfinder",
                        "card"
                    ],
                    "default": "resfinder",
                    "fa_icon": "fas fa-shield-alt"
                },
                "arg_database": {
                    "type": "string",
                    "description": "Database to use for ARG detection.",
                    "fa_icon": "fas fa-database"
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/$defs/input_output_options"
        },
        {
            "$ref": "#/$defs/assembler_options"
        },
        {
            "$ref": "#/$defs/annotation_options"
        },
        {
            "$ref": "#/$defs/comparison_options"
        },
        {
            "$ref": "#/$defs/arg_detection_options"
        }
    ]
}